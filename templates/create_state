#!/usr/bin/python
#kate: tab-width 4; indent-width 4; replace-tabs on;
#Creating a new nimbro_fsm2 state using the template state
#Author: Christian Lenz <lenz@ais.uni-bonn.de>

from __future__ import print_function

import os
import em
import sys
import re
import rospkg
import copy
import argparse
from catkin_pkg.packages import find_packages
import subprocess

# Determine the author information
def get_git_config(name):
    try:
        return subprocess.check_output(["git", "config", name]).strip()
    except subprocess.CalledProcessError as e:
        print('git config {} returned exit code {}. Please set up your git config first!'.format(
            name, e.returncode
        ))
        raise

email = get_git_config("user.email")
maintainer = get_git_config("user.name")

# Find current package
def find_current_package():
    search_path = os.getcwd()
    stop_path = '/'
    child_path = '.'
    package_name = None

    # Find packages under the search path
    while search_path != stop_path:
        try:
            pkgs = find_packages(search_path)
        except RuntimeError:
            print("Current folder is not part of a package!")
            sys.exit()

        # Check if the directory is a catkin package
        if child_path in pkgs:
            return pkgs[child_path].name

        # Update search path
        (search_path, child_path) = os.path.split(search_path)

    print("Can't find current package. Is the workspace sourced?")
    sys.exit()

def camel_to_snake_case(name):
    s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', name)
    return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()

package_name = find_current_package()

#find nimbro_fsm2 package path to open the template files
rospack = rospkg.RosPack()
try:
    fsm2_path = os.path.join(rospack.get_path('nimbro_fsm2'), "templates")
except:
    print("Can't find 'nimbro_fsm2' package. No idea where the templates are :(")
    sys.exit()

try:
    package_path = rospack.get_path(package_name)
except:
    print("Can't find '" + package_name + "' package. Is the workspace sourced?")
    sys.exit()

# Parse arguments
argparser = argparse.ArgumentParser(description = "Generate a new nimbro_fsm2 state .cpp and .h file and add the includes into the CMakeLists.txt and the driver file")

argparser.add_argument("name", help="Name for the new state (class name). The lower case version is used as file name (.cpp and .h file)")
argparser.add_argument("-n", "--namespace", help="Namespace used for the new state. The state files will be placed in a subfoulder")
argparser.add_argument("--fsm", help="Name of the fsm header file. This file will be included in the new state. Default: 'fsm.h'.")
argparser.add_argument("-d", "--driver", help="Name of the driver .cpp file. The new state will be registered  in this file (i.e. add #include). Default: 'driver.cpp'.")
argparser.add_argument("-c", "--only_create", help="Create the .cpp and .h file without registering the state. The fsm.h and driver.cpp files are not needed.", action="store_true")

args = argparser.parse_args()

# dictionary to pass all variables to empy
vars = {
    "state_name" : "TestState",
    "state_filename" : "test_state",
    "state_ns" : None,
    "fsm" : "fsm",
    "driver" : "driver",
    "package_name" : package_name,
    "maintainer" : maintainer,
    "email" : email,
}
if args.name:
    vars["state_name"] = args.name
if args.fsm:
    vars["fsm"] = args.fsm
if args.namespace:
    vars["state_ns"] = args.namespace
if args.driver:
    vars["driver"] = args.driver

vars["state_filename"] = camel_to_snake_case(vars["state_name"])

print("Creating new nimbro_fsm2 state files:")
print("\t- " + vars["state_filename"] + ".cpp")
print("\t- " + vars["state_filename"] + ".h")


# get relative fsm.h path.
if vars["state_ns"] != None:
    vars["fsm"] = os.path.join("../..", vars["fsm"])
else:
    vars["fsm"] = os.path.join("..", vars["fsm"])

fsm_path = os.path.join(package_path, "src", vars["driver"] + ".cpp")
if not os.path.isfile(fsm_path):
    print(fsm_path + " not found")
    sys.exit()

print("Include fsm header '" + vars["fsm"] + ".h'")

# search driver.cpp
driver_path = os.path.join(package_path, "src", vars["driver"] + ".cpp")
if not os.path.isfile(driver_path):
    print(driver_path + " not found")
    sys.exit()

# create subfolder if needed and set state file paths
if vars["state_ns"] != None:
    try:
        os.mkdir(os.path.join(package_path, "src/states", vars["state_ns"]))
    except OSError:
        print ("Folder '/src/states/%s' already exists." % vars["state_ns"])
    include_path = os.path.join("states", vars["state_ns"], vars["state_filename"] + ".h")
    state_path = os.path.join("src/states", vars["state_ns"], vars["state_filename"])

else:
    include_path = os.path.join("states", vars["state_filename"] + ".h")
    state_path = os.path.join("src/states", vars["state_filename"])


# register state in driver.cpp
with open(driver_path, "r") as in_file:
    buf = in_file.readlines()

    # the include is added after the last '#include' line
    idx = 0
    include = True
    for i in range(len(buf) - 1):
        if "#include" in buf[i]:
            idx = i
        if '#include "' + include_path + '"' in buf[i]:
            include = False
            break
        i+=1

    if include:
        #add the new line and save the file
        print("Register state in driver file '" + vars["driver"] + "'")
        buf[idx] = buf[idx] + '#include "' + include_path + '"\n'
        with open(driver_path, "w") as out_file:
            for line in buf:
                out_file.write(line)
    else:
        print("State was already included in the driver '" + vars["driver"] + "'")

# Find CMakeLists.txt and add new state
with open(package_path + "/CMakeLists.txt", "r") as in_file:
    buf = in_file.readlines()

    with open(package_path + "/CMakeLists.txt", "w") as out_file:

        in_ex = False
        for line in buf:
            if "add_executable(" + package_name in line:
                in_ex = True
                print("CMakeLists found add_executable")
            if in_ex and ")" in line:
                print(line)
                line = "\t" + state_path + ".cpp\n)\n"
                print("CMakeLists found end + added .cpp")
                print(line)
                in_ex = False

            out_file.write(line)

# create new state files
outcpp = open(state_path + ".cpp", "w")
outheader = open(state_path + ".h", "w")

# copy the variables for both templates
varsh = copy.deepcopy(vars)

# interpret .cpp template
interpretercpp = em.Interpreter(globals = vars, output = outcpp)
try:
    interpretercpp.file(open(os.path.join(fsm2_path, "state.cpp")))
finally:
    interpretercpp.shutdown()

outcpp.close()

# interpret header file
interpreterh = em.Interpreter(globals = varsh, output = outheader)
try:
    interpreterh.file(open(os.path.join(fsm2_path, "state.h")))
finally:
    interpreterh.shutdown()

outheader.close()
